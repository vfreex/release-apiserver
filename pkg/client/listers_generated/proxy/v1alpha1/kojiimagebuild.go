/*
Copyright 2020 The OCP Release APIServer Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vfreex/release-apiserver/pkg/apis/proxy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KojiImageBuildLister helps list KojiImageBuilds.
type KojiImageBuildLister interface {
	// List lists all KojiImageBuilds in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KojiImageBuild, err error)
	// KojiImageBuilds returns an object that can list and get KojiImageBuilds.
	KojiImageBuilds(namespace string) KojiImageBuildNamespaceLister
	KojiImageBuildListerExpansion
}

// kojiImageBuildLister implements the KojiImageBuildLister interface.
type kojiImageBuildLister struct {
	indexer cache.Indexer
}

// NewKojiImageBuildLister returns a new KojiImageBuildLister.
func NewKojiImageBuildLister(indexer cache.Indexer) KojiImageBuildLister {
	return &kojiImageBuildLister{indexer: indexer}
}

// List lists all KojiImageBuilds in the indexer.
func (s *kojiImageBuildLister) List(selector labels.Selector) (ret []*v1alpha1.KojiImageBuild, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KojiImageBuild))
	})
	return ret, err
}

// KojiImageBuilds returns an object that can list and get KojiImageBuilds.
func (s *kojiImageBuildLister) KojiImageBuilds(namespace string) KojiImageBuildNamespaceLister {
	return kojiImageBuildNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KojiImageBuildNamespaceLister helps list and get KojiImageBuilds.
type KojiImageBuildNamespaceLister interface {
	// List lists all KojiImageBuilds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KojiImageBuild, err error)
	// Get retrieves the KojiImageBuild from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KojiImageBuild, error)
	KojiImageBuildNamespaceListerExpansion
}

// kojiImageBuildNamespaceLister implements the KojiImageBuildNamespaceLister
// interface.
type kojiImageBuildNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KojiImageBuilds in the indexer for a given namespace.
func (s kojiImageBuildNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KojiImageBuild, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KojiImageBuild))
	})
	return ret, err
}

// Get retrieves the KojiImageBuild from the indexer for a given namespace and name.
func (s kojiImageBuildNamespaceLister) Get(name string) (*v1alpha1.KojiImageBuild, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kojiimagebuild"), name)
	}
	return obj.(*v1alpha1.KojiImageBuild), nil
}
