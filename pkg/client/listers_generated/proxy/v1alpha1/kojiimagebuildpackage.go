/*
Copyright 2020 The OCP Release APIServer Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vfreex/release-apiserver/pkg/apis/proxy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KojiImageBuildPackageLister helps list KojiImageBuildPackages.
type KojiImageBuildPackageLister interface {
	// List lists all KojiImageBuildPackages in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KojiImageBuildPackage, err error)
	// KojiImageBuildPackages returns an object that can list and get KojiImageBuildPackages.
	KojiImageBuildPackages(namespace string) KojiImageBuildPackageNamespaceLister
	KojiImageBuildPackageListerExpansion
}

// kojiImageBuildPackageLister implements the KojiImageBuildPackageLister interface.
type kojiImageBuildPackageLister struct {
	indexer cache.Indexer
}

// NewKojiImageBuildPackageLister returns a new KojiImageBuildPackageLister.
func NewKojiImageBuildPackageLister(indexer cache.Indexer) KojiImageBuildPackageLister {
	return &kojiImageBuildPackageLister{indexer: indexer}
}

// List lists all KojiImageBuildPackages in the indexer.
func (s *kojiImageBuildPackageLister) List(selector labels.Selector) (ret []*v1alpha1.KojiImageBuildPackage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KojiImageBuildPackage))
	})
	return ret, err
}

// KojiImageBuildPackages returns an object that can list and get KojiImageBuildPackages.
func (s *kojiImageBuildPackageLister) KojiImageBuildPackages(namespace string) KojiImageBuildPackageNamespaceLister {
	return kojiImageBuildPackageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KojiImageBuildPackageNamespaceLister helps list and get KojiImageBuildPackages.
type KojiImageBuildPackageNamespaceLister interface {
	// List lists all KojiImageBuildPackages in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KojiImageBuildPackage, err error)
	// Get retrieves the KojiImageBuildPackage from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KojiImageBuildPackage, error)
	KojiImageBuildPackageNamespaceListerExpansion
}

// kojiImageBuildPackageNamespaceLister implements the KojiImageBuildPackageNamespaceLister
// interface.
type kojiImageBuildPackageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KojiImageBuildPackages in the indexer for a given namespace.
func (s kojiImageBuildPackageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KojiImageBuildPackage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KojiImageBuildPackage))
	})
	return ret, err
}

// Get retrieves the KojiImageBuildPackage from the indexer for a given namespace and name.
func (s kojiImageBuildPackageNamespaceLister) Get(name string) (*v1alpha1.KojiImageBuildPackage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kojiimagebuildpackage"), name)
	}
	return obj.(*v1alpha1.KojiImageBuildPackage), nil
}
