/*
Copyright 2020 The OpenShift Release APIServer Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vfreex/release-apiserver/pkg/apis/art/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReleaseStreamLister helps list ReleaseStreams.
type ReleaseStreamLister interface {
	// List lists all ReleaseStreams in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ReleaseStream, err error)
	// ReleaseStreams returns an object that can list and get ReleaseStreams.
	ReleaseStreams(namespace string) ReleaseStreamNamespaceLister
	ReleaseStreamListerExpansion
}

// releaseStreamLister implements the ReleaseStreamLister interface.
type releaseStreamLister struct {
	indexer cache.Indexer
}

// NewReleaseStreamLister returns a new ReleaseStreamLister.
func NewReleaseStreamLister(indexer cache.Indexer) ReleaseStreamLister {
	return &releaseStreamLister{indexer: indexer}
}

// List lists all ReleaseStreams in the indexer.
func (s *releaseStreamLister) List(selector labels.Selector) (ret []*v1alpha1.ReleaseStream, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReleaseStream))
	})
	return ret, err
}

// ReleaseStreams returns an object that can list and get ReleaseStreams.
func (s *releaseStreamLister) ReleaseStreams(namespace string) ReleaseStreamNamespaceLister {
	return releaseStreamNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReleaseStreamNamespaceLister helps list and get ReleaseStreams.
type ReleaseStreamNamespaceLister interface {
	// List lists all ReleaseStreams in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ReleaseStream, err error)
	// Get retrieves the ReleaseStream from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ReleaseStream, error)
	ReleaseStreamNamespaceListerExpansion
}

// releaseStreamNamespaceLister implements the ReleaseStreamNamespaceLister
// interface.
type releaseStreamNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReleaseStreams in the indexer for a given namespace.
func (s releaseStreamNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ReleaseStream, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReleaseStream))
	})
	return ret, err
}

// Get retrieves the ReleaseStream from the indexer for a given namespace and name.
func (s releaseStreamNamespaceLister) Get(name string) (*v1alpha1.ReleaseStream, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("releasestream"), name)
	}
	return obj.(*v1alpha1.ReleaseStream), nil
}
