/*
Copyright 2020 The OpenShift Release APIServer Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vfreex/release-apiserver/pkg/apis/art/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AdvisoryLister helps list Advisories.
type AdvisoryLister interface {
	// List lists all Advisories in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Advisory, err error)
	// Advisories returns an object that can list and get Advisories.
	Advisories(namespace string) AdvisoryNamespaceLister
	AdvisoryListerExpansion
}

// advisoryLister implements the AdvisoryLister interface.
type advisoryLister struct {
	indexer cache.Indexer
}

// NewAdvisoryLister returns a new AdvisoryLister.
func NewAdvisoryLister(indexer cache.Indexer) AdvisoryLister {
	return &advisoryLister{indexer: indexer}
}

// List lists all Advisories in the indexer.
func (s *advisoryLister) List(selector labels.Selector) (ret []*v1alpha1.Advisory, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Advisory))
	})
	return ret, err
}

// Advisories returns an object that can list and get Advisories.
func (s *advisoryLister) Advisories(namespace string) AdvisoryNamespaceLister {
	return advisoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AdvisoryNamespaceLister helps list and get Advisories.
type AdvisoryNamespaceLister interface {
	// List lists all Advisories in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Advisory, err error)
	// Get retrieves the Advisory from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Advisory, error)
	AdvisoryNamespaceListerExpansion
}

// advisoryNamespaceLister implements the AdvisoryNamespaceLister
// interface.
type advisoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Advisories in the indexer for a given namespace.
func (s advisoryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Advisory, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Advisory))
	})
	return ret, err
}

// Get retrieves the Advisory from the indexer for a given namespace and name.
func (s advisoryNamespaceLister) Get(name string) (*v1alpha1.Advisory, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("advisory"), name)
	}
	return obj.(*v1alpha1.Advisory), nil
}
