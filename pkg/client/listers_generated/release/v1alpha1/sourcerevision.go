/*
Copyright 2020 The OpenShift Release APIServer Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vfreex/release-apiserver/pkg/apis/release/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SourceRevisionLister helps list SourceRevisions.
type SourceRevisionLister interface {
	// List lists all SourceRevisions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SourceRevision, err error)
	// SourceRevisions returns an object that can list and get SourceRevisions.
	SourceRevisions(namespace string) SourceRevisionNamespaceLister
	SourceRevisionListerExpansion
}

// sourceRevisionLister implements the SourceRevisionLister interface.
type sourceRevisionLister struct {
	indexer cache.Indexer
}

// NewSourceRevisionLister returns a new SourceRevisionLister.
func NewSourceRevisionLister(indexer cache.Indexer) SourceRevisionLister {
	return &sourceRevisionLister{indexer: indexer}
}

// List lists all SourceRevisions in the indexer.
func (s *sourceRevisionLister) List(selector labels.Selector) (ret []*v1alpha1.SourceRevision, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SourceRevision))
	})
	return ret, err
}

// SourceRevisions returns an object that can list and get SourceRevisions.
func (s *sourceRevisionLister) SourceRevisions(namespace string) SourceRevisionNamespaceLister {
	return sourceRevisionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SourceRevisionNamespaceLister helps list and get SourceRevisions.
type SourceRevisionNamespaceLister interface {
	// List lists all SourceRevisions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SourceRevision, err error)
	// Get retrieves the SourceRevision from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SourceRevision, error)
	SourceRevisionNamespaceListerExpansion
}

// sourceRevisionNamespaceLister implements the SourceRevisionNamespaceLister
// interface.
type sourceRevisionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SourceRevisions in the indexer for a given namespace.
func (s sourceRevisionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SourceRevision, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SourceRevision))
	})
	return ret, err
}

// Get retrieves the SourceRevision from the indexer for a given namespace and name.
func (s sourceRevisionNamespaceLister) Get(name string) (*v1alpha1.SourceRevision, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sourcerevision"), name)
	}
	return obj.(*v1alpha1.SourceRevision), nil
}
