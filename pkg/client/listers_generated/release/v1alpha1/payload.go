/*
Copyright 2020 The OpenShift Release APIServer Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vfreex/release-apiserver/pkg/apis/release/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PayloadLister helps list Payloads.
type PayloadLister interface {
	// List lists all Payloads in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Payload, err error)
	// Payloads returns an object that can list and get Payloads.
	Payloads(namespace string) PayloadNamespaceLister
	PayloadListerExpansion
}

// payloadLister implements the PayloadLister interface.
type payloadLister struct {
	indexer cache.Indexer
}

// NewPayloadLister returns a new PayloadLister.
func NewPayloadLister(indexer cache.Indexer) PayloadLister {
	return &payloadLister{indexer: indexer}
}

// List lists all Payloads in the indexer.
func (s *payloadLister) List(selector labels.Selector) (ret []*v1alpha1.Payload, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Payload))
	})
	return ret, err
}

// Payloads returns an object that can list and get Payloads.
func (s *payloadLister) Payloads(namespace string) PayloadNamespaceLister {
	return payloadNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PayloadNamespaceLister helps list and get Payloads.
type PayloadNamespaceLister interface {
	// List lists all Payloads in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Payload, err error)
	// Get retrieves the Payload from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Payload, error)
	PayloadNamespaceListerExpansion
}

// payloadNamespaceLister implements the PayloadNamespaceLister
// interface.
type payloadNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Payloads in the indexer for a given namespace.
func (s payloadNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Payload, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Payload))
	})
	return ret, err
}

// Get retrieves the Payload from the indexer for a given namespace and name.
func (s payloadNamespaceLister) Get(name string) (*v1alpha1.Payload, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("payload"), name)
	}
	return obj.(*v1alpha1.Payload), nil
}
