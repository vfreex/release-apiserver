/*
Copyright 2020 The OpenShift Release APIServer Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by apiregister-gen. DO NOT EDIT.

package art

import (
	"context"
	"fmt"

	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/registry/rest"
	"sigs.k8s.io/apiserver-builder-alpha/pkg/builders"
)

var (
	ArtAdvisoryStorage = builders.NewApiResource( // Resource status endpoint
		InternalAdvisory,
		func() runtime.Object { return &Advisory{} },     // Register versioned resource
		func() runtime.Object { return &AdvisoryList{} }, // Register versioned resource list
		&AdvisoryStrategy{builders.StorageStrategySingleton},
	)
	ArtBuildStorage = builders.NewApiResource( // Resource status endpoint
		InternalBuild,
		func() runtime.Object { return &Build{} },     // Register versioned resource
		func() runtime.Object { return &BuildList{} }, // Register versioned resource list
		&BuildStrategy{builders.StorageStrategySingleton},
	)
	ArtComponentStorage = builders.NewApiResource( // Resource status endpoint
		InternalComponent,
		func() runtime.Object { return &Component{} },     // Register versioned resource
		func() runtime.Object { return &ComponentList{} }, // Register versioned resource list
		&ComponentStrategy{builders.StorageStrategySingleton},
	)
	ArtRPMComposeStorage = builders.NewApiResource( // Resource status endpoint
		InternalRPMCompose,
		func() runtime.Object { return &RPMCompose{} },     // Register versioned resource
		func() runtime.Object { return &RPMComposeList{} }, // Register versioned resource list
		&RPMComposeStrategy{builders.StorageStrategySingleton},
	)
	ArtReleaseStorage = builders.NewApiResource( // Resource status endpoint
		InternalRelease,
		func() runtime.Object { return &Release{} },     // Register versioned resource
		func() runtime.Object { return &ReleaseList{} }, // Register versioned resource list
		&ReleaseStrategy{builders.StorageStrategySingleton},
	)
	ArtReleaseStreamStorage = builders.NewApiResource( // Resource status endpoint
		InternalReleaseStream,
		func() runtime.Object { return &ReleaseStream{} },     // Register versioned resource
		func() runtime.Object { return &ReleaseStreamList{} }, // Register versioned resource list
		&ReleaseStreamStrategy{builders.StorageStrategySingleton},
	)
	ArtSourceRevisionStorage = builders.NewApiResource( // Resource status endpoint
		InternalSourceRevision,
		func() runtime.Object { return &SourceRevision{} },     // Register versioned resource
		func() runtime.Object { return &SourceRevisionList{} }, // Register versioned resource list
		&SourceRevisionStrategy{builders.StorageStrategySingleton},
	)
	InternalAdvisory = builders.NewInternalResource(
		"advisories",
		"Advisory",
		func() runtime.Object { return &Advisory{} },
		func() runtime.Object { return &AdvisoryList{} },
	)
	InternalAdvisoryStatus = builders.NewInternalResourceStatus(
		"advisories",
		"AdvisoryStatus",
		func() runtime.Object { return &Advisory{} },
		func() runtime.Object { return &AdvisoryList{} },
	)
	InternalBuild = builders.NewInternalResource(
		"builds",
		"Build",
		func() runtime.Object { return &Build{} },
		func() runtime.Object { return &BuildList{} },
	)
	InternalBuildStatus = builders.NewInternalResourceStatus(
		"builds",
		"BuildStatus",
		func() runtime.Object { return &Build{} },
		func() runtime.Object { return &BuildList{} },
	)
	InternalComponent = builders.NewInternalResource(
		"components",
		"Component",
		func() runtime.Object { return &Component{} },
		func() runtime.Object { return &ComponentList{} },
	)
	InternalComponentStatus = builders.NewInternalResourceStatus(
		"components",
		"ComponentStatus",
		func() runtime.Object { return &Component{} },
		func() runtime.Object { return &ComponentList{} },
	)
	InternalRPMCompose = builders.NewInternalResource(
		"rpmcomposes",
		"RPMCompose",
		func() runtime.Object { return &RPMCompose{} },
		func() runtime.Object { return &RPMComposeList{} },
	)
	InternalRPMComposeStatus = builders.NewInternalResourceStatus(
		"rpmcomposes",
		"RPMComposeStatus",
		func() runtime.Object { return &RPMCompose{} },
		func() runtime.Object { return &RPMComposeList{} },
	)
	InternalRelease = builders.NewInternalResource(
		"releases",
		"Release",
		func() runtime.Object { return &Release{} },
		func() runtime.Object { return &ReleaseList{} },
	)
	InternalReleaseStatus = builders.NewInternalResourceStatus(
		"releases",
		"ReleaseStatus",
		func() runtime.Object { return &Release{} },
		func() runtime.Object { return &ReleaseList{} },
	)
	InternalReleaseStream = builders.NewInternalResource(
		"releasestreams",
		"ReleaseStream",
		func() runtime.Object { return &ReleaseStream{} },
		func() runtime.Object { return &ReleaseStreamList{} },
	)
	InternalReleaseStreamStatus = builders.NewInternalResourceStatus(
		"releasestreams",
		"ReleaseStreamStatus",
		func() runtime.Object { return &ReleaseStream{} },
		func() runtime.Object { return &ReleaseStreamList{} },
	)
	InternalSourceRevision = builders.NewInternalResource(
		"sourcerevisions",
		"SourceRevision",
		func() runtime.Object { return &SourceRevision{} },
		func() runtime.Object { return &SourceRevisionList{} },
	)
	InternalSourceRevisionStatus = builders.NewInternalResourceStatus(
		"sourcerevisions",
		"SourceRevisionStatus",
		func() runtime.Object { return &SourceRevision{} },
		func() runtime.Object { return &SourceRevisionList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("art.openshift.io").WithKinds(
		InternalAdvisory,
		InternalAdvisoryStatus,
		InternalBuild,
		InternalBuildStatus,
		InternalComponent,
		InternalComponentStatus,
		InternalRPMCompose,
		InternalRPMComposeStatus,
		InternalRelease,
		InternalReleaseStatus,
		InternalReleaseStream,
		InternalReleaseStreamStatus,
		InternalSourceRevision,
		InternalSourceRevisionStatus,
	)

	// Required by code generated by go2idl
	AddToScheme = (&runtime.SchemeBuilder{
		ApiVersion.SchemeBuilder.AddToScheme,
		RegisterDefaults,
	}).AddToScheme
	SchemeBuilder      = ApiVersion.SchemeBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Advisory struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   AdvisorySpec
	Status AdvisoryStatus
}

type AdvisorySpec struct {
	Number      int32
	Impetus     string
	ReleaseName string
	Instance    string
}

type AdvisoryStatus struct {
	LiveID string
	State  string
}

type BrewBuild struct {
	Name       string
	Version    string
	Release    string
	NVR        string
	Target     string
	TaskNumber int32
	Instance   string
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Build struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   BuildSpec
	Status BuildStatus
}

type BuildJenkinsInfo struct {
	BuildUrl string
}

type BuildSpec struct {
	Type    string
	Brew    BrewBuild
	Jenkins BuildJenkinsInfo
}

type BuildStatus struct {
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Component struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   ComponentSpec
	Status ComponentStatus
}

type ComponentDistGit struct {
	Namespace  string
	Repository string
	Instance   string
}

type ComponentGitSource struct {
	Url         string
	Ref         string
	FallbackRef string
	Path        string
}

type ComponentImage struct {
	Repository string
	Namespace  string
}

type ComponentSource struct {
	Git ComponentGitSource
}

type ComponentSpec struct {
	Kind    string
	Image   ComponentImage
	Source  ComponentSource
	DistGit ComponentDistGit
}

type ComponentStatus struct {
}

type OcpBuildDataGitSource struct {
	Url  string
	Ref  string
	Path string
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type RPMCompose struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   RPMComposeSpec
	Status RPMComposeStatus
}

type RPMComposeSpec struct {
}

type RPMComposeStatus struct {
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Release struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   ReleaseSpec
	Status ReleaseStatus
}

type ReleaseSpec struct {
	ReleaseStreamName string
	Version           ReleaseVersion
}

type ReleaseStatus struct {
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type ReleaseStream struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   ReleaseStreamSpec
	Status ReleaseStreamStatus
}

type ReleaseStreamOcpBuildData struct {
	Git OcpBuildDataGitSource
}

type ReleaseStreamSpec struct {
	OcpBuildData ReleaseStreamOcpBuildData
}

type ReleaseStreamStatus struct {
}

type ReleaseVersion struct {
	Major      int32
	Minor      int32
	Patch      int32
	PreRelease string
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type SourceRevision struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   SourceRevisionSpec
	Status SourceRevisionStatus
}

type SourceRevisionSpec struct {
	ComponentName string
	CommitHash    string
}

type SourceRevisionStatus struct {
}

//
// Advisory Functions and Structs
//
// +k8s:deepcopy-gen=false
type AdvisoryStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type AdvisoryStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type AdvisoryList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Advisory
}

func (Advisory) NewStatus() interface{} {
	return AdvisoryStatus{}
}

func (pc *Advisory) GetStatus() interface{} {
	return pc.Status
}

func (pc *Advisory) SetStatus(s interface{}) {
	pc.Status = s.(AdvisoryStatus)
}

func (pc *Advisory) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Advisory) SetSpec(s interface{}) {
	pc.Spec = s.(AdvisorySpec)
}

func (pc *Advisory) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Advisory) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Advisory) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Advisory.
// +k8s:deepcopy-gen=false
type AdvisoryRegistry interface {
	ListAdvisorys(ctx context.Context, options *internalversion.ListOptions) (*AdvisoryList, error)
	GetAdvisory(ctx context.Context, id string, options *metav1.GetOptions) (*Advisory, error)
	CreateAdvisory(ctx context.Context, id *Advisory) (*Advisory, error)
	UpdateAdvisory(ctx context.Context, id *Advisory) (*Advisory, error)
	DeleteAdvisory(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewAdvisoryRegistry(sp builders.StandardStorageProvider) AdvisoryRegistry {
	return &storageAdvisory{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageAdvisory struct {
	builders.StandardStorageProvider
}

func (s *storageAdvisory) ListAdvisorys(ctx context.Context, options *internalversion.ListOptions) (*AdvisoryList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*AdvisoryList), err
}

func (s *storageAdvisory) GetAdvisory(ctx context.Context, id string, options *metav1.GetOptions) (*Advisory, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Advisory), nil
}

func (s *storageAdvisory) CreateAdvisory(ctx context.Context, object *Advisory) (*Advisory, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Advisory), nil
}

func (s *storageAdvisory) UpdateAdvisory(ctx context.Context, object *Advisory) (*Advisory, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Advisory), nil
}

func (s *storageAdvisory) DeleteAdvisory(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil, &metav1.DeleteOptions{})
	return sync, err
}

//
// Build Functions and Structs
//
// +k8s:deepcopy-gen=false
type BuildStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type BuildStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type BuildList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Build
}

func (Build) NewStatus() interface{} {
	return BuildStatus{}
}

func (pc *Build) GetStatus() interface{} {
	return pc.Status
}

func (pc *Build) SetStatus(s interface{}) {
	pc.Status = s.(BuildStatus)
}

func (pc *Build) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Build) SetSpec(s interface{}) {
	pc.Spec = s.(BuildSpec)
}

func (pc *Build) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Build) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Build) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Build.
// +k8s:deepcopy-gen=false
type BuildRegistry interface {
	ListBuilds(ctx context.Context, options *internalversion.ListOptions) (*BuildList, error)
	GetBuild(ctx context.Context, id string, options *metav1.GetOptions) (*Build, error)
	CreateBuild(ctx context.Context, id *Build) (*Build, error)
	UpdateBuild(ctx context.Context, id *Build) (*Build, error)
	DeleteBuild(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewBuildRegistry(sp builders.StandardStorageProvider) BuildRegistry {
	return &storageBuild{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageBuild struct {
	builders.StandardStorageProvider
}

func (s *storageBuild) ListBuilds(ctx context.Context, options *internalversion.ListOptions) (*BuildList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*BuildList), err
}

func (s *storageBuild) GetBuild(ctx context.Context, id string, options *metav1.GetOptions) (*Build, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Build), nil
}

func (s *storageBuild) CreateBuild(ctx context.Context, object *Build) (*Build, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Build), nil
}

func (s *storageBuild) UpdateBuild(ctx context.Context, object *Build) (*Build, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Build), nil
}

func (s *storageBuild) DeleteBuild(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil, &metav1.DeleteOptions{})
	return sync, err
}

//
// Component Functions and Structs
//
// +k8s:deepcopy-gen=false
type ComponentStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type ComponentStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type ComponentList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Component
}

func (Component) NewStatus() interface{} {
	return ComponentStatus{}
}

func (pc *Component) GetStatus() interface{} {
	return pc.Status
}

func (pc *Component) SetStatus(s interface{}) {
	pc.Status = s.(ComponentStatus)
}

func (pc *Component) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Component) SetSpec(s interface{}) {
	pc.Spec = s.(ComponentSpec)
}

func (pc *Component) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Component) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Component) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Component.
// +k8s:deepcopy-gen=false
type ComponentRegistry interface {
	ListComponents(ctx context.Context, options *internalversion.ListOptions) (*ComponentList, error)
	GetComponent(ctx context.Context, id string, options *metav1.GetOptions) (*Component, error)
	CreateComponent(ctx context.Context, id *Component) (*Component, error)
	UpdateComponent(ctx context.Context, id *Component) (*Component, error)
	DeleteComponent(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewComponentRegistry(sp builders.StandardStorageProvider) ComponentRegistry {
	return &storageComponent{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageComponent struct {
	builders.StandardStorageProvider
}

func (s *storageComponent) ListComponents(ctx context.Context, options *internalversion.ListOptions) (*ComponentList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*ComponentList), err
}

func (s *storageComponent) GetComponent(ctx context.Context, id string, options *metav1.GetOptions) (*Component, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Component), nil
}

func (s *storageComponent) CreateComponent(ctx context.Context, object *Component) (*Component, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Component), nil
}

func (s *storageComponent) UpdateComponent(ctx context.Context, object *Component) (*Component, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Component), nil
}

func (s *storageComponent) DeleteComponent(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil, &metav1.DeleteOptions{})
	return sync, err
}

//
// RPMCompose Functions and Structs
//
// +k8s:deepcopy-gen=false
type RPMComposeStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type RPMComposeStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type RPMComposeList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []RPMCompose
}

func (RPMCompose) NewStatus() interface{} {
	return RPMComposeStatus{}
}

func (pc *RPMCompose) GetStatus() interface{} {
	return pc.Status
}

func (pc *RPMCompose) SetStatus(s interface{}) {
	pc.Status = s.(RPMComposeStatus)
}

func (pc *RPMCompose) GetSpec() interface{} {
	return pc.Spec
}

func (pc *RPMCompose) SetSpec(s interface{}) {
	pc.Spec = s.(RPMComposeSpec)
}

func (pc *RPMCompose) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *RPMCompose) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc RPMCompose) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store RPMCompose.
// +k8s:deepcopy-gen=false
type RPMComposeRegistry interface {
	ListRPMComposes(ctx context.Context, options *internalversion.ListOptions) (*RPMComposeList, error)
	GetRPMCompose(ctx context.Context, id string, options *metav1.GetOptions) (*RPMCompose, error)
	CreateRPMCompose(ctx context.Context, id *RPMCompose) (*RPMCompose, error)
	UpdateRPMCompose(ctx context.Context, id *RPMCompose) (*RPMCompose, error)
	DeleteRPMCompose(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewRPMComposeRegistry(sp builders.StandardStorageProvider) RPMComposeRegistry {
	return &storageRPMCompose{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageRPMCompose struct {
	builders.StandardStorageProvider
}

func (s *storageRPMCompose) ListRPMComposes(ctx context.Context, options *internalversion.ListOptions) (*RPMComposeList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*RPMComposeList), err
}

func (s *storageRPMCompose) GetRPMCompose(ctx context.Context, id string, options *metav1.GetOptions) (*RPMCompose, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*RPMCompose), nil
}

func (s *storageRPMCompose) CreateRPMCompose(ctx context.Context, object *RPMCompose) (*RPMCompose, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*RPMCompose), nil
}

func (s *storageRPMCompose) UpdateRPMCompose(ctx context.Context, object *RPMCompose) (*RPMCompose, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*RPMCompose), nil
}

func (s *storageRPMCompose) DeleteRPMCompose(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil, &metav1.DeleteOptions{})
	return sync, err
}

//
// Release Functions and Structs
//
// +k8s:deepcopy-gen=false
type ReleaseStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type ReleaseStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type ReleaseList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Release
}

func (Release) NewStatus() interface{} {
	return ReleaseStatus{}
}

func (pc *Release) GetStatus() interface{} {
	return pc.Status
}

func (pc *Release) SetStatus(s interface{}) {
	pc.Status = s.(ReleaseStatus)
}

func (pc *Release) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Release) SetSpec(s interface{}) {
	pc.Spec = s.(ReleaseSpec)
}

func (pc *Release) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Release) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Release) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Release.
// +k8s:deepcopy-gen=false
type ReleaseRegistry interface {
	ListReleases(ctx context.Context, options *internalversion.ListOptions) (*ReleaseList, error)
	GetRelease(ctx context.Context, id string, options *metav1.GetOptions) (*Release, error)
	CreateRelease(ctx context.Context, id *Release) (*Release, error)
	UpdateRelease(ctx context.Context, id *Release) (*Release, error)
	DeleteRelease(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewReleaseRegistry(sp builders.StandardStorageProvider) ReleaseRegistry {
	return &storageRelease{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageRelease struct {
	builders.StandardStorageProvider
}

func (s *storageRelease) ListReleases(ctx context.Context, options *internalversion.ListOptions) (*ReleaseList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*ReleaseList), err
}

func (s *storageRelease) GetRelease(ctx context.Context, id string, options *metav1.GetOptions) (*Release, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Release), nil
}

func (s *storageRelease) CreateRelease(ctx context.Context, object *Release) (*Release, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Release), nil
}

func (s *storageRelease) UpdateRelease(ctx context.Context, object *Release) (*Release, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Release), nil
}

func (s *storageRelease) DeleteRelease(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil, &metav1.DeleteOptions{})
	return sync, err
}

//
// ReleaseStream Functions and Structs
//
// +k8s:deepcopy-gen=false
type ReleaseStreamStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type ReleaseStreamStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type ReleaseStreamList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []ReleaseStream
}

func (ReleaseStream) NewStatus() interface{} {
	return ReleaseStreamStatus{}
}

func (pc *ReleaseStream) GetStatus() interface{} {
	return pc.Status
}

func (pc *ReleaseStream) SetStatus(s interface{}) {
	pc.Status = s.(ReleaseStreamStatus)
}

func (pc *ReleaseStream) GetSpec() interface{} {
	return pc.Spec
}

func (pc *ReleaseStream) SetSpec(s interface{}) {
	pc.Spec = s.(ReleaseStreamSpec)
}

func (pc *ReleaseStream) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *ReleaseStream) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc ReleaseStream) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store ReleaseStream.
// +k8s:deepcopy-gen=false
type ReleaseStreamRegistry interface {
	ListReleaseStreams(ctx context.Context, options *internalversion.ListOptions) (*ReleaseStreamList, error)
	GetReleaseStream(ctx context.Context, id string, options *metav1.GetOptions) (*ReleaseStream, error)
	CreateReleaseStream(ctx context.Context, id *ReleaseStream) (*ReleaseStream, error)
	UpdateReleaseStream(ctx context.Context, id *ReleaseStream) (*ReleaseStream, error)
	DeleteReleaseStream(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewReleaseStreamRegistry(sp builders.StandardStorageProvider) ReleaseStreamRegistry {
	return &storageReleaseStream{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageReleaseStream struct {
	builders.StandardStorageProvider
}

func (s *storageReleaseStream) ListReleaseStreams(ctx context.Context, options *internalversion.ListOptions) (*ReleaseStreamList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*ReleaseStreamList), err
}

func (s *storageReleaseStream) GetReleaseStream(ctx context.Context, id string, options *metav1.GetOptions) (*ReleaseStream, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*ReleaseStream), nil
}

func (s *storageReleaseStream) CreateReleaseStream(ctx context.Context, object *ReleaseStream) (*ReleaseStream, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*ReleaseStream), nil
}

func (s *storageReleaseStream) UpdateReleaseStream(ctx context.Context, object *ReleaseStream) (*ReleaseStream, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*ReleaseStream), nil
}

func (s *storageReleaseStream) DeleteReleaseStream(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil, &metav1.DeleteOptions{})
	return sync, err
}

//
// SourceRevision Functions and Structs
//
// +k8s:deepcopy-gen=false
type SourceRevisionStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type SourceRevisionStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type SourceRevisionList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []SourceRevision
}

func (SourceRevision) NewStatus() interface{} {
	return SourceRevisionStatus{}
}

func (pc *SourceRevision) GetStatus() interface{} {
	return pc.Status
}

func (pc *SourceRevision) SetStatus(s interface{}) {
	pc.Status = s.(SourceRevisionStatus)
}

func (pc *SourceRevision) GetSpec() interface{} {
	return pc.Spec
}

func (pc *SourceRevision) SetSpec(s interface{}) {
	pc.Spec = s.(SourceRevisionSpec)
}

func (pc *SourceRevision) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *SourceRevision) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc SourceRevision) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store SourceRevision.
// +k8s:deepcopy-gen=false
type SourceRevisionRegistry interface {
	ListSourceRevisions(ctx context.Context, options *internalversion.ListOptions) (*SourceRevisionList, error)
	GetSourceRevision(ctx context.Context, id string, options *metav1.GetOptions) (*SourceRevision, error)
	CreateSourceRevision(ctx context.Context, id *SourceRevision) (*SourceRevision, error)
	UpdateSourceRevision(ctx context.Context, id *SourceRevision) (*SourceRevision, error)
	DeleteSourceRevision(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewSourceRevisionRegistry(sp builders.StandardStorageProvider) SourceRevisionRegistry {
	return &storageSourceRevision{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageSourceRevision struct {
	builders.StandardStorageProvider
}

func (s *storageSourceRevision) ListSourceRevisions(ctx context.Context, options *internalversion.ListOptions) (*SourceRevisionList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*SourceRevisionList), err
}

func (s *storageSourceRevision) GetSourceRevision(ctx context.Context, id string, options *metav1.GetOptions) (*SourceRevision, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*SourceRevision), nil
}

func (s *storageSourceRevision) CreateSourceRevision(ctx context.Context, object *SourceRevision) (*SourceRevision, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*SourceRevision), nil
}

func (s *storageSourceRevision) UpdateSourceRevision(ctx context.Context, object *SourceRevision) (*SourceRevision, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*SourceRevision), nil
}

func (s *storageSourceRevision) DeleteSourceRevision(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil, &metav1.DeleteOptions{})
	return sync, err
}
