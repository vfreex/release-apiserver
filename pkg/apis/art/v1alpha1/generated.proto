/*
Copyright 2020 The OpenShift Release APIServer Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.vfreex.release_apiserver.pkg.apis.art.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "sigs.k8s.io/apiserver-builder-alpha/pkg/builders/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Advisory
// +k8s:openapi-gen=true
// +resource:path=advisories,strategy=AdvisoryStrategy,shortNames=ad,categories=all;art
message Advisory {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional AdvisorySpec spec = 2;

  optional AdvisoryStatus status = 3;
}

message AdvisoryList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Advisory items = 2;
}

// AdvisorySpec defines the desired state of Advisory
message AdvisorySpec {
  optional int32 number = 1;

  optional string impetus = 2;

  optional string releaseName = 3;

  optional string instance = 4;
}

// AdvisoryStatus defines the observed state of Advisory
message AdvisoryStatus {
  optional string liveID = 1;

  optional string state = 2;
}

message BrewBuild {
  optional string name = 1;

  optional string version = 2;

  optional string release = 3;

  optional string nvr = 4;

  optional string target = 5;

  optional int32 taskNumber = 6;

  optional string instance = 7;
}

// Build
// +k8s:openapi-gen=true
// +resource:path=builds,strategy=BuildStrategy,shortNames=b,categories=all;art
message Build {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BuildSpec spec = 2;

  optional BuildStatus status = 3;
}

message BuildJenkinsInfo {
  optional string buildUrl = 1;
}

message BuildList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Build items = 2;
}

// BuildSpec defines the desired state of Build
message BuildSpec {
  optional string type = 1;

  optional BrewBuild brew = 2;

  optional BuildJenkinsInfo jenkins = 3;
}

// BuildStatus defines the observed state of Build
message BuildStatus {
}

// Component
// +k8s:openapi-gen=true
// +resource:path=components,strategy=ComponentStrategy,shortNames=cp,categories=all;art
message Component {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ComponentSpec spec = 2;

  optional ComponentStatus status = 3;
}

message ComponentDistGit {
  optional string namespace = 1;

  optional string repository = 2;

  optional string instance = 3;
}

message ComponentGitSource {
  optional string url = 1;

  optional string ref = 2;

  optional string fallbackRef = 3;

  optional string path = 4;
}

message ComponentImage {
  optional string repository = 1;

  optional string namespace = 2;
}

message ComponentList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Component items = 2;
}

message ComponentSource {
  optional ComponentGitSource git = 1;
}

// ComponentSpec defines the desired state of Component
message ComponentSpec {
  optional string kind = 1;

  optional ComponentImage image = 2;

  optional ComponentSource source = 3;

  optional ComponentDistGit distGit = 4;
}

// ComponentStatus defines the observed state of Component
message ComponentStatus {
}

message OcpBuildDataGitSource {
  optional string url = 1;

  optional string ref = 2;

  optional string path = 3;
}

// RPMCompose
// +k8s:openapi-gen=true
// +resource:path=rpmcomposes,strategy=RPMComposeStrategy,shortNames=rc,categories=all;art
message RPMCompose {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RPMComposeSpec spec = 2;

  optional RPMComposeStatus status = 3;
}

message RPMComposeList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated RPMCompose items = 2;
}

// RPMComposeSpec defines the desired state of RPMCompose
message RPMComposeSpec {
}

// RPMComposeStatus defines the observed state of RPMCompose
message RPMComposeStatus {
}

// Release
// +k8s:openapi-gen=true
// +resource:path=releases,strategy=ReleaseStrategy,shortNames=rl,categories=all;art
message Release {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ReleaseSpec spec = 2;

  optional ReleaseStatus status = 3;
}

message ReleaseList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Release items = 2;
}

// ReleaseSpec defines the desired state of Release
message ReleaseSpec {
  optional string releaseStreamName = 1;

  optional ReleaseVersion version = 2;
}

// ReleaseStatus defines the observed state of Release
message ReleaseStatus {
}

// ReleaseStream
// +k8s:openapi-gen=true
// +resource:path=releasestreams,strategy=ReleaseStreamStrategy,shortNames=rs,categories=all;art
message ReleaseStream {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ReleaseStreamSpec spec = 2;

  optional ReleaseStreamStatus status = 3;
}

message ReleaseStreamList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ReleaseStream items = 2;
}

message ReleaseStreamOcpBuildData {
  optional OcpBuildDataGitSource git = 1;
}

// ReleaseStreamSpec defines the desired state of ReleaseStream
message ReleaseStreamSpec {
  optional ReleaseStreamOcpBuildData ocpBuildData = 1;
}

// ReleaseStreamStatus defines the observed state of ReleaseStream
message ReleaseStreamStatus {
}

message ReleaseVersion {
  optional int32 major = 1;

  optional int32 minor = 2;

  optional int32 patch = 3;

  optional string preRelease = 4;
}

// SourceRevision
// +k8s:openapi-gen=true
// +resource:path=sourcerevisions,strategy=SourceRevisionStrategy,shortNames=sr,categories=all;art
message SourceRevision {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SourceRevisionSpec spec = 2;

  optional SourceRevisionStatus status = 3;
}

message SourceRevisionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated SourceRevision items = 2;
}

// SourceRevisionSpec defines the desired state of SourceRevision
message SourceRevisionSpec {
  optional string componentName = 1;

  optional string commitHash = 2;
}

// SourceRevisionStatus defines the observed state of SourceRevision
message SourceRevisionStatus {
}

