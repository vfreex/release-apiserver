/*
Copyright 2020 The OCP Release APIServer Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by apiregister-gen. DO NOT EDIT.

package proxy

import (
	"context"
	"fmt"

	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/registry/rest"
	"sigs.k8s.io/apiserver-builder-alpha/pkg/builders"
)

var (
	ProxyKojiImageBuildStorage = builders.NewApiResourceWithStorage( // Resource status endpoint
		InternalKojiImageBuild,
		func() runtime.Object { return &KojiImageBuild{} },     // Register versioned resource
		func() runtime.Object { return &KojiImageBuildList{} }, // Register versioned resource list
		NewKojiImageBuildREST,
	)
	InternalKojiImageBuild = builders.NewInternalResourceWithShortcuts(
		"kojiimagebuilds",
		"KojiImageBuild",
		func() runtime.Object { return &KojiImageBuild{} },
		func() runtime.Object { return &KojiImageBuildList{} },
		[]string{"ki"},
		[]string{"aggregation"}, // TBD
	)
	InternalKojiImageBuildStatus = builders.NewInternalResourceStatus(
		"kojiimagebuilds",
		"KojiImageBuildStatus",
		func() runtime.Object { return &KojiImageBuild{} },
		func() runtime.Object { return &KojiImageBuildList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("proxy.art.openshift.io").WithKinds(
		InternalKojiImageBuild,
		InternalKojiImageBuildStatus,
	)

	// Required by code generated by go2idl
	AddToScheme = (&runtime.SchemeBuilder{
		ApiVersion.SchemeBuilder.AddToScheme,
		RegisterDefaults,
	}).AddToScheme
	SchemeBuilder      = ApiVersion.SchemeBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type KojiImageBuild struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   KojiImageBuildSpec
	Status KojiImageBuildStatus
}

type KojiImageBuildSpec struct {
	Name    string
	Version string
	Release string
}

type KojiImageBuildStatus struct {
	KojiState     string
	KojiBuildLink string
}

//
// KojiImageBuild Functions and Structs
//
// +k8s:deepcopy-gen=false
type KojiImageBuildStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type KojiImageBuildStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type KojiImageBuildList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []KojiImageBuild
}

func (KojiImageBuild) NewStatus() interface{} {
	return KojiImageBuildStatus{}
}

func (pc *KojiImageBuild) GetStatus() interface{} {
	return pc.Status
}

func (pc *KojiImageBuild) SetStatus(s interface{}) {
	pc.Status = s.(KojiImageBuildStatus)
}

func (pc *KojiImageBuild) GetSpec() interface{} {
	return pc.Spec
}

func (pc *KojiImageBuild) SetSpec(s interface{}) {
	pc.Spec = s.(KojiImageBuildSpec)
}

func (pc *KojiImageBuild) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *KojiImageBuild) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc KojiImageBuild) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store KojiImageBuild.
// +k8s:deepcopy-gen=false
type KojiImageBuildRegistry interface {
	ListKojiImageBuilds(ctx context.Context, options *internalversion.ListOptions) (*KojiImageBuildList, error)
	GetKojiImageBuild(ctx context.Context, id string, options *metav1.GetOptions) (*KojiImageBuild, error)
	CreateKojiImageBuild(ctx context.Context, id *KojiImageBuild) (*KojiImageBuild, error)
	UpdateKojiImageBuild(ctx context.Context, id *KojiImageBuild) (*KojiImageBuild, error)
	DeleteKojiImageBuild(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewKojiImageBuildRegistry(sp builders.StandardStorageProvider) KojiImageBuildRegistry {
	return &storageKojiImageBuild{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageKojiImageBuild struct {
	builders.StandardStorageProvider
}

func (s *storageKojiImageBuild) ListKojiImageBuilds(ctx context.Context, options *internalversion.ListOptions) (*KojiImageBuildList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*KojiImageBuildList), err
}

func (s *storageKojiImageBuild) GetKojiImageBuild(ctx context.Context, id string, options *metav1.GetOptions) (*KojiImageBuild, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*KojiImageBuild), nil
}

func (s *storageKojiImageBuild) CreateKojiImageBuild(ctx context.Context, object *KojiImageBuild) (*KojiImageBuild, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*KojiImageBuild), nil
}

func (s *storageKojiImageBuild) UpdateKojiImageBuild(ctx context.Context, object *KojiImageBuild) (*KojiImageBuild, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*KojiImageBuild), nil
}

func (s *storageKojiImageBuild) DeleteKojiImageBuild(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil, &metav1.DeleteOptions{})
	return sync, err
}
