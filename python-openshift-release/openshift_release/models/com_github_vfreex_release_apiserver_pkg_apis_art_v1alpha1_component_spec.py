# coding: utf-8

"""
    Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openshift_release.configuration import Configuration


class ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dist_git': 'ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentDistGit',
        'image': 'ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentImage',
        'kind': 'str',
        'source': 'ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSource'
    }

    attribute_map = {
        'dist_git': 'distGit',
        'image': 'image',
        'kind': 'kind',
        'source': 'source'
    }

    def __init__(self, dist_git=None, image=None, kind=None, source=None, local_vars_configuration=None):  # noqa: E501
        """ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dist_git = None
        self._image = None
        self._kind = None
        self._source = None
        self.discriminator = None

        if dist_git is not None:
            self.dist_git = dist_git
        if image is not None:
            self.image = image
        if kind is not None:
            self.kind = kind
        if source is not None:
            self.source = source

    @property
    def dist_git(self):
        """Gets the dist_git of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.  # noqa: E501


        :return: The dist_git of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.  # noqa: E501
        :rtype: ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentDistGit
        """
        return self._dist_git

    @dist_git.setter
    def dist_git(self, dist_git):
        """Sets the dist_git of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.


        :param dist_git: The dist_git of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.  # noqa: E501
        :type: ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentDistGit
        """

        self._dist_git = dist_git

    @property
    def image(self):
        """Gets the image of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.  # noqa: E501


        :return: The image of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.  # noqa: E501
        :rtype: ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.


        :param image: The image of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.  # noqa: E501
        :type: ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentImage
        """

        self._image = image

    @property
    def kind(self):
        """Gets the kind of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.  # noqa: E501


        :return: The kind of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.


        :param kind: The kind of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def source(self):
        """Gets the source of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.  # noqa: E501


        :return: The source of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.  # noqa: E501
        :rtype: ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.


        :param source: The source of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec.  # noqa: E501
        :type: ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSource
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ComponentSpec):
            return True

        return self.to_dict() != other.to_dict()
