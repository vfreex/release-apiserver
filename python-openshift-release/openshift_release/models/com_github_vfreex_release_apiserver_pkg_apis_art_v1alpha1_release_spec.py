# coding: utf-8

"""
    Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openshift_release.configuration import Configuration


class ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'release_stream_name': 'str',
        'version': 'ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseVersion'
    }

    attribute_map = {
        'release_stream_name': 'releaseStreamName',
        'version': 'version'
    }

    def __init__(self, release_stream_name=None, version=None, local_vars_configuration=None):  # noqa: E501
        """ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._release_stream_name = None
        self._version = None
        self.discriminator = None

        self.release_stream_name = release_stream_name
        self.version = version

    @property
    def release_stream_name(self):
        """Gets the release_stream_name of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseSpec.  # noqa: E501


        :return: The release_stream_name of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseSpec.  # noqa: E501
        :rtype: str
        """
        return self._release_stream_name

    @release_stream_name.setter
    def release_stream_name(self, release_stream_name):
        """Sets the release_stream_name of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseSpec.


        :param release_stream_name: The release_stream_name of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and release_stream_name is None:  # noqa: E501
            raise ValueError("Invalid value for `release_stream_name`, must not be `None`")  # noqa: E501

        self._release_stream_name = release_stream_name

    @property
    def version(self):
        """Gets the version of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseSpec.  # noqa: E501


        :return: The version of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseSpec.  # noqa: E501
        :rtype: ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseSpec.


        :param version: The version of this ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseSpec.  # noqa: E501
        :type: ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseVersion
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGithubVfreexReleaseApiserverPkgApisArtV1alpha1ReleaseSpec):
            return True

        return self.to_dict() != other.to_dict()
